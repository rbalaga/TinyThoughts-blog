{"version":3,"sources":["App.js","serviceWorker.js","store/reducers/posts.js","store/reducers/users.js","store/reducers/errors.js","store/index.js","server/index.js","index.js"],"names":["App","className","Boolean","window","location","hostname","match","posts","state","action","users","errors","rootReducer","combineReducers","createStore","applyMiddleware","thunk","i","jwtPrivateKey","process","PRIVATE_KEY","lsKey","sign","obj","Promise","resolve","reject","jwt","error","token","verify","success","protectedRoute","schema","request","cb","headers","requestHeaders","authorization","Response","split","persist","contents","localStorage","setItem","JSON","stringify","db","timestamp","Date","getTime","loadData","tte","ttd","parse","getItem","removeItem","opt","Server","seeds","server","models","Model","extend","author","categories","routes","this","namespace","get","sort","a","b","Number","id","map","post","authors","filter","authorId","categoriesId","params","getPost","p","where","newPost","requestBody","newlyCreatedPost","insert","dump","delete","remove","message","user","decode","findBy","email","Object","keys","password","hashedPwd","bcryptjs","hashSync","newUser","nUser","name","signed","body","fetchUser","compare","dateJoined","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62ed3370.chunk.js","sourcesContent":["import React from \"react\";\n\nconst App = () => {\n  return <div className=\"app\"></div>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const posts = (state, action) => {};\n\nexport default posts;\n","const users = (state, action) => {};\n\nexport default users;\n","const errors = (state, action) => {};\n\nexport default errors;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { combineReducers } from \"redux\";\nimport posts from \"./reducers/posts\";\nimport users from \"./reducers/users\";\nimport errors from \"./reducers/errors\";\n\nconst rootReducer = combineReducers({\n  posts,\n  users,\n  errors\n});\nexport default createStore(rootReducer, applyMiddleware(thunk));\n","import { Model, Server, Response } from \"miragejs\";\nimport db from \"./db.json\";\nimport bcryptjs from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\n\nconst jwtPrivateKey = process.env.PRIVATE_KEY || \"ChocolateDoughnuts\";\nconst lsKey = \"TinyThoughts_DataPersistence\";\n\nconst sign = (obj) =>\n  new Promise((resolve, reject) => {\n    jwt.sign(obj, jwtPrivateKey, (error, token) => {\n      if (error) return reject(error);\n\n      return resolve(token);\n    });\n  });\n\nconst verify = (token) =>\n  new Promise((resolve, reject) => {\n    jwt.verify(token, jwtPrivateKey, (error) => {\n      if (error) return reject();\n      return resolve({ success: true });\n    });\n  });\n\nconst protectedRoute = async (schema, request, cb) => {\n  const headers = request.requestHeaders;\n\n  if (!headers.authorization) {\n    return new Response(\n      401,\n      { \"content-type\": \"application/json\" },\n      { error: \"Missing authorization header in request\" }\n    );\n  }\n\n  const token = headers.authorization.split(\" \")[1];\n  const vrf = await verify(token);\n\n  if (!vrf) {\n    return new Response(\n      401,\n      { \"content-type\": \"application/json\" },\n      { error: \"Unauthorized\" }\n    );\n  }\n\n  return cb(schema, request);\n};\n\nconst persist = (contents) => {\n  window.localStorage.setItem(\n    lsKey,\n    JSON.stringify({ db: contents, timestamp: new Date().getTime() })\n  );\n};\n\nconst loadData = (tte) => {\n  if (!window.localStorage[lsKey]) {\n    return { db };\n  }\n\n  let ttd = JSON.parse(window.localStorage.getItem(lsKey));\n  let diff = (new Date().getTime() - ttd.timestamp) / 60000;\n\n  if (diff > tte) {\n    window.localStorage.removeItem(lsKey);\n    return {\n      db,\n    };\n  }\n\n  return ttd;\n};\n\nexport default (opt = { tte: 20 }) =>\n  new Server({\n    seeds(server) {\n      server.db.loadData(loadData(opt.tte).db);\n    },\n    models: {\n      posts: Model.extend(),\n      author: Model.extend(),\n      categories: Model.extend(),\n    },\n    routes() {\n      this.namespace = \"api\";\n      this.get(\"/categories\", (schema, request) => schema.db.categories);\n      this.get(\"/posts\", (schema, request) => {\n        return schema.db.posts\n          .sort((a, b) => Number(b.id) - Number(a.id))\n          .map((post) => {\n            return {\n              ...post,\n              author: schema.db.authors.filter(\n                (i) => Number(i.id) === Number(post.authorId)\n              )[0],\n              categories: schema.db.categories.filter(\n                (i) => Number(i.id) === Number(post.categoriesId)\n              )[0],\n            };\n          });\n      });\n\n      this.get(\"/posts/:id\", (schema, request) => {\n        const id = request.params.id;\n        const getPost = schema.db.posts.filter(\n          (p) => Number(p.id) === Number(id)\n        )[0];\n        return {\n          ...getPost,\n          author: schema.db.authors.filter(\n            (i) => Number(i.id) === Number(getPost.authorId)\n          )[0],\n          categories: schema.db.categories.filter(\n            (i) => Number(i.id) === Number(getPost.categoriesId)\n          )[0],\n        };\n      });\n\n      this.get(\"/posts/category/:id\", (schema, request) => {\n        const id = request.params.id;\n\n        return schema.db.posts.where({ categoriesId: id }).map((post) => {\n          return {\n            ...post,\n            author: schema.db.authors.filter(\n              (i) => Number(i.id) === Number(post.authorId)\n            )[0],\n            categories: schema.db.categories.filter(\n              (i) => Number(i.id) === Number(post.categoriesId)\n            )[0],\n          };\n        });\n      });\n\n      this.get(\"/posts/author/:id\", (schema, request) => {\n        const id = request.params.id;\n        return schema.db.posts.where({ authorId: id }).map((post) => {\n          return {\n            ...post,\n            author: schema.db.authors.filter(\n              (i) => Number(i.id) === Number(post.authorId)\n            )[0],\n            categories: schema.db.categories.filter(\n              (i) => Number(i.id) === Number(post.categoriesId)\n            )[0],\n          };\n        });\n      });\n\n      this.post(\"/posts\", (schema, request) =>\n        protectedRoute(schema, request, async (schema, request) => {\n          const newPost = JSON.parse(request.requestBody);\n          const newlyCreatedPost = schema.db.posts.insert(newPost);\n          persist(schema.db.dump());\n          return {\n            id: newlyCreatedPost.id,\n          };\n        })\n      );\n\n      this.delete(\"/posts/:id\", (schema, request) =>\n        protectedRoute(schema, request, (schema, request) => {\n          const id = request.params.id;\n          schema.db.posts.remove({ id });\n          persist(schema.db.dump());\n          return { message: true };\n        })\n      );\n\n      this.post(\"/verify\", async (schema, request) => {\n        const { token } = JSON.parse(request.requestBody);\n        const user = jwt.decode(token);\n        const fetchUser = await schema.db.authors.findBy({ email: user.email });\n\n        if (!fetchUser) {\n          return new Response(\n            401,\n            { \"content-type\": \"application/json\" },\n            { error: \"Unauthorized\" }\n          );\n        }\n        return await verify(token);\n      });\n\n      this.post(\"/signup\", async (schema, request) => {\n        if (\n          JSON.stringify(Object.keys(JSON.parse(request.requestBody))) !==\n          JSON.stringify([\"name\", \"email\", \"password\", \"dateJoined\"])\n        ) {\n          return new Response(\n            401,\n            { \"content-type\": \"application/json\" },\n            { error: \"Data missing in request\" }\n          );\n        }\n\n        const { email, password, ...user } = JSON.parse(request.requestBody);\n        const fetchUser = schema.db.authors.findBy({ email });\n\n        if (fetchUser) {\n          return new Response(\n            401,\n            { \"content-type\": \"application/json\" },\n            { error: \"User already exists\" }\n          );\n        }\n\n        const hashedPwd = bcryptjs.hashSync(password, 10);\n        const newUser = {\n          password: hashedPwd,\n          email,\n          ...user,\n        };\n\n        const nUser = schema.db.authors.insert(newUser);\n        persist(schema.db.dump());\n        const signed = await sign({\n          id: nUser.id,\n          name: nUser.name,\n          email: nUser.email,\n        });\n\n        return { token: signed, user: { id: nUser.id, name: nUser.name } };\n      });\n\n      this.post(\"/signin\", async (schema, request) => {\n        const body = JSON.parse(request.requestBody);\n\n        if (body.email && body.password) {\n          const fetchUser = schema.db.authors.findBy({ email: body.email });\n          if (fetchUser) {\n            const compPass = await bcryptjs.compare(\n              body.password,\n              fetchUser.password\n            );\n            if (!compPass) {\n              return new Response(\n                401,\n                { \"content-type\": \"application/json\" },\n                { error: \"Incorrect password\" }\n              );\n            }\n\n            const token = await sign({\n              id: fetchUser.id,\n              name: fetchUser.name,\n              email: fetchUser.email,\n              dateJoined: fetchUser.dateJoined,\n            });\n\n            return { token, user: { id: fetchUser.id, name: fetchUser.name } };\n          } else {\n            return new Response(\n              401,\n              { \"content-type\": \"application/json\" },\n              { error: \"Incorrect password\" }\n            );\n          }\n        }\n      });\n    },\n  });\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport store from \"./store\";\nimport server from \"./server\";\n\nserver({ tte: 20 }); // Set tte in mins to expire the persistence store\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}